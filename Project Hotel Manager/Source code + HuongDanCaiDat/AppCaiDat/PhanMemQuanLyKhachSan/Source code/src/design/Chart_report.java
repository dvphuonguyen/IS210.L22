package design;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.EventQueue;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;

import org.jfree.data.category.DefaultCategoryDataset;

import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.CategoryLabelPositions;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PiePlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.renderer.category.BarRenderer;
import org.jfree.chart.renderer.category.CategoryItemRenderer;
import org.jfree.chart.renderer.category.LineAndShapeRenderer;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.general.DefaultPieDataset;
import javax.swing.GroupLayout.Alignment;
import javax.swing.GroupLayout;
import javax.swing.LayoutStyle.ComponentPlacement;

public class Chart_report extends JFrame {

	private JPanel contentPane;

	/**
	 * Launch the application.
	 */
	public Chart_report() {
        initComponents();
        //showPieChart();
        showLineChart();
        showBarChart();
        showBarChart1();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        pnLineChart = new javax.swing.JPanel();
        pnBarChart1 = new javax.swing.JPanel();

        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        pnLineChart.setLayout(new java.awt.BorderLayout());

        pnBarChart1.setLayout(new java.awt.BorderLayout());

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1Layout.setHorizontalGroup(
        	jPanel1Layout.createParallelGroup(Alignment.LEADING)
        		.addGroup(jPanel1Layout.createSequentialGroup()
        			.addGroup(jPanel1Layout.createParallelGroup(Alignment.LEADING)
        				.addGroup(jPanel1Layout.createSequentialGroup()
        					.addGap(27)
        					.addComponent(pnBarChart1, GroupLayout.PREFERRED_SIZE, 516, GroupLayout.PREFERRED_SIZE))
        				.addGroup(jPanel1Layout.createSequentialGroup()
        					.addGap(146)
        					.addComponent(pnLineChart, GroupLayout.PREFERRED_SIZE, 272, GroupLayout.PREFERRED_SIZE)))
        			.addContainerGap(288, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
        	jPanel1Layout.createParallelGroup(Alignment.LEADING)
        		.addGroup(Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
        			.addGap(37)
        			.addComponent(pnLineChart, GroupLayout.PREFERRED_SIZE, 224, GroupLayout.PREFERRED_SIZE)
        			.addPreferredGap(ComponentPlacement.RELATED, 105, Short.MAX_VALUE)
        			.addComponent(pnBarChart1, GroupLayout.PREFERRED_SIZE, 289, GroupLayout.PREFERRED_SIZE)
        			.addContainerGap())
        );
        jPanel1.setLayout(jPanel1Layout);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Chart_report.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Chart_report.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Chart_report.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Chart_report.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Chart_report().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel pnBarChart1;
    private javax.swing.JPanel pnLineChart;
    // End of variables declaration//GEN-END:variables
 
    public static Connection getJDBCConnection() {
		try {
			return DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:xe", "c##demo", "123456");
		}
		catch (SQLException e1) {
			// TODO Auto-generated catch block
		}
		return null;
	}
  
    private void showLineChart() {
    	Connection conn = getJDBCConnection();
		PreparedStatement statement = null;
            try {
                //Connection conn = DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:xe", "c##demo", "123456");
                String sql =    "SELECT DV.MADV, TENDV, SUM(SLDV) SLDICHVU \n" +
                                "FROM CHITIETPDV CTPDV JOIN DICHVU DV ON DV.MADV = CTPDV.MADV \n" +
                                "GROUP BY  DV.MADV, TENDV\n" +
                                "HAVING SUM(SLDV) >= (   SELECT *\n" +
                                "                        FROM (\n" +
                                "                                SELECT * \n" +
                                "                                FROM(\n" +
                                "                                        SELECT DISTINCT SUM(SLDV) \n" +
                                "                                        FROM CHITIETPDV CTPDV JOIN DICHVU DV ON DV.MADV = CTPDV.MADV \n" +
                                "                                        GROUP BY  DV.MADV, TENDV\n" +
                                "                                        ORDER BY 1 DESC\n" +
                                "                                    )\n" +
                                "                                WHERE ROWNUM <= 3\n" +
                                "                                ORDER BY 1\n" +
                                "                            )\n" +
                                "                        WHERE ROWNUM = 1\n" +
                                "                    )\n" +
                                "ORDER BY DV.MADV";

                //tao dataset 
                DefaultCategoryDataset dataset = new DefaultCategoryDataset();
                
    			statement = conn.prepareStatement(sql);
                ResultSet rs = statement.executeQuery();
                while(rs.next()){
                    dataset.setValue((float) rs.getInt("SLDICHVU"), "so luong dich vu", rs.getString("TENDV"));
                }

                //tao bar chart + doi mau
                JFreeChart linechart = ChartFactory.createLineChart("Top 3 dịch vụ sử dụng nhiều nhất", "Tên dịch vụ", "Số lượng dịch vụ", dataset, PlotOrientation.VERTICAL, false, true, false);
                
                CategoryPlot plot = linechart.getCategoryPlot();
                plot.setBackgroundPaint(Color.WHITE);
               // LineAndShapeRenderer renderer= (LineAndShapeRenderer) plot.getRenderer();
                //Color mauXanh = new Color(0, 0, 51);
                //renderer.setSeriesPaint(0, mauXanh);
                plot.getDomainAxis().setCategoryLabelPositions(CategoryLabelPositions.UP_45);
               
                //xuat ra 
                ChartPanel lineChartPanel = new ChartPanel(linechart);
                pnLineChart.removeAll();
                pnLineChart.add(lineChartPanel, BorderLayout.CENTER);
                pnLineChart.validate();
                pnLineChart.updateUI();
                
            } catch (SQLException ex) {
            	ex.printStackTrace();            
            }
            finally {
    			if (statement != null) {
    				try {
    					statement.close();
    				} catch (SQLException e2) {
    					// TODO Auto-generated catch block
    					e2.printStackTrace();
    				}
    			}
    			if (conn != null) {
    				try {
    					conn.close();
    				} catch (SQLException e1) {	
    					// TODO Auto-generated catch block
    					e1.printStackTrace();
    				}
    			}
    		}

       
    }

    private void showBarChart1() {
       
            try {
                Connection conn = DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:xe", "c##demo", "123456");
                String sql =    "SELECT A.TEN_THANG, SUM(TONGTIEN) HOADON\n" +
                        "FROM (  SELECT  extract(month from ADD_MONTHS(TRUNC (to_date('01/01/2021',' dd/mm/yyyy'), 'MONTH'), i)) thang_so,\n" +
                        "                  to_char(ADD_MONTHS (TRUNC (to_date('01/01/2021',' dd/mm/yyyy'), 'MONTH'), i), 'MONTH') ten_thang\n" +
                        "                       FROM XMLTABLE (\n" +
                        "                       'for $i in 0 to xs:int(D) return $i'\n" +
                        "                        PASSING XMLELEMENT (\n" +
                        "                        d,\n" +
                        "                        FLOOR (\n" +
                        "                        MONTHS_BETWEEN (\n" +
                        "                        ADD_MONTHS (TRUNC (SYSDATE, 'YEAR') - 1, 12),\n" +
                        "                               SYSDATE)))\n" +
                        "                               COLUMNS i INTEGER PATH '.')\n" +
                        "    ) A JOIN HOADON HD ON A.THANG_SO = EXTRACT(MONTH FROM HD.NGAYTT)\n" +
                        "GROUP BY A.TEN_THANG, A.THANG_SO\n" +
                        "ORDER BY A.THANG_SO, A.TEN_THANG";

                //tao dataset 
                DefaultCategoryDataset dataset = new DefaultCategoryDataset();
                
                PreparedStatement statement = conn.prepareStatement(sql);
                ResultSet rs = statement.executeQuery();
                while(rs.next()){
                    dataset.setValue( (float)rs.getInt("HOADON"), "Doanh thu", rs.getString("TEN_THANG"));
                }

                //tao bar chart + doi mau
                JFreeChart barchart1 = ChartFactory.createBarChart("Thống kê hoá đơn theo tháng năm 2021", "Tháng", "Doanh thu", dataset, PlotOrientation.VERTICAL, false, true, false);

                CategoryPlot plot = barchart1.getCategoryPlot();
                plot.setBackgroundPaint(Color.WHITE);
                BarRenderer renderer= (BarRenderer) plot.getRenderer();
                Color mauHong = new Color(237, 171, 229);
                renderer.setSeriesPaint(0, mauHong);
                plot.getDomainAxis().setCategoryLabelPositions(CategoryLabelPositions.UP_45);
               
                //xuat ra 
                ChartPanel barChartPanel = new ChartPanel(barchart1);
                pnBarChart1.removeAll();
                pnBarChart1.add(barChartPanel, BorderLayout.NORTH);
                pnBarChart1.validate();
                
            } catch (SQLException ex) {
                Logger.getLogger(Chart_report.class.getName()).log(Level.SEVERE, null, ex);
            }

       
    }

    private void showBarChart() {
        
        
            try {
                Connection conn = DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:xe", "c##demo", "123456");
                String sql =    "select c.ngay_4 ,           case\n" +
                        "                when viet_nam is null then 0\n" +
                        "                else viet_nam\n" +
                        "                end as vnam,\n" +
                        "                            case\n" +
                        "                when nuoc_ngoai is null then 0\n" +
                        "                else nuoc_ngoai\n" +
                        "                end as nngoai\n" +
                        "from (  SELECT  extract(month from ADD_MONTHS(TRUNC (to_date('01/01/2021',' dd/mm/yyyy'), 'MONTH'), i)) thang_so,\n" +
                        "                  to_char(ADD_MONTHS (TRUNC (to_date('01/01/2021',' dd/mm/yyyy'), 'MONTH'), i), 'MONTH') ten_thang\n" +
                        "                       FROM XMLTABLE (\n" +
                        "                       'for $i in 0 to xs:int(D) return $i'\n" +
                        "                        PASSING XMLELEMENT (\n" +
                        "                        d,\n" +
                        "                        FLOOR (\n" +
                        "                        MONTHS_BETWEEN (\n" +
                        "                        ADD_MONTHS (TRUNC (SYSDATE, 'YEAR') - 1, 11),\n" +
                        "                               SYSDATE)))\n" +
                        "                               COLUMNS i INTEGER PATH '.')\n" +
                        "    ) a  join\n" +
                        "    (  select distinct(extract(month from ngaybd)) ngay_3, to_char(chitietttp.ngaybd, 'Month') ngay_4\n" +
                        "        from chitietttp\n" +
                        "        order by 1\n" +
                        "    ) c on a.thang_so = c.ngay_3 join (  select extract(month from ctttp1.ngaybd) ngay, count(*) dem_ngaybd\n" +
                        "                                    from chitietttp ctttp1\n" +
                        "                                    where mattp = 3\n" +
                        "                                    group by extract(month from ctttp1.ngaybd)\n" +
                        "                                    order by extract(month from ctttp1.ngaybd)\n" +
                        "                                    ) a on a.ngay = c.ngay_3\n" +
                        "                      join (   select extract(month from ctttp2.ngaykt) ngay_1, count(*) dem_ngaykt\n" +
                        "                                    from chitietttp ctttp2\n" +
                        "                                    where mattp = 3\n" +
                        "                                    group by extract(month from ctttp2.ngaykt)\n" +
                        "                                    order by extract(month from ctttp2.ngaykt)\n" +
                        "                                ) b on b.ngay_1 = c.ngay_3\n" +
                        "                    join (   select extract(month from ngaytt) ngay_5, count(kh.makh) as viet_nam, count(kh1.makh) as nuoc_ngoai\n" +
                        "                                        from hoadon hd left join (   select makh\n" +
                        "                                                                from khachhang\n" +
                        "                                                                where upper(quoctich) = upper('Việt Nam')\n" +
                        "                                                            ) kh on hd.makh = kh.makh\n" +
                        "                                                        left join (   select makh\n" +
                        "                                                                from khachhang\n" +
                        "                                                                where upper(quoctich) <> upper('Việt Nam')\n" +
                        "                                                            ) kh1 on hd.makh = kh1.makh\n" +
                        "                                        group by extract(month from ngaytt)\n" +
                        "                                    ) d on d.ngay_5 = c.ngay_3\n" +
                        "order by c.ngay_3";

        //tao dataset 
        DefaultCategoryDataset dataset = new DefaultCategoryDataset();
        DefaultCategoryDataset dataset1 = new DefaultCategoryDataset();
        PreparedStatement statement = conn.prepareStatement(sql);
        ResultSet rs = statement.executeQuery();
        while(rs.next()){
            dataset.setValue( (float)rs.getInt("nngoai"), "Khách nước ngoài", rs.getString("ngay_4"));
            dataset1.setValue( (float)rs.getInt("vnam"), "Khách Việt Nam", rs.getString("ngay_4"));
        }
        Color mauXanh = new Color(131, 131, 222);
        
        //tao bar chart + doi mau
        CategoryItemRenderer renderer = new BarRenderer();
        //renderer.setDefaultPaint(Color.WHITE);
        renderer.setBaseSeriesVisible(true);

        CategoryPlot plot = new CategoryPlot();
        plot.setBackgroundPaint(Color.WHITE);
        plot.setDataset(dataset);
        plot.setRenderer(renderer);

        plot.setDomainAxis(new CategoryAxis("Tháng"));
        plot.setRangeAxis(new NumberAxis("Số lượng khách hàng"));

        plot.setOrientation(PlotOrientation.VERTICAL);
        plot.setRangeGridlinesVisible(true);
        plot.setDomainGridlinesVisible(true);
        
        CategoryItemRenderer renderer1 = new BarRenderer();
        plot.setDataset(1, dataset1);
        plot.setRenderer(1, renderer1);
        renderer1.setSeriesPaint(1, mauXanh);
        plot.mapDatasetToRangeAxis(1, 0);;

        

       

        //plot.setDatasetRenderingOrder(DatasetRenderingOrder.FORWARD);

        plot.getDomainAxis().setCategoryLabelPositions(CategoryLabelPositions.UP_45);
        
        JFreeChart chart = new JFreeChart(plot);
        chart.setTitle("Thống kê số lượng khách hàng");
        chart.setBackgroundPaint(Color.WHITE);
        
    } catch (SQLException ex) {
        Logger.getLogger(Chart_report.class.getName()).log(Level.SEVERE, null, ex);
    }
}
}
